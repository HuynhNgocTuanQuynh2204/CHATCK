/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package chatsocket;

import static chatsocket.ReadClient.mess;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Point;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.ObjectInputStream;
import java.io.OutputStream;
import static java.lang.Thread.currentThread;
import java.net.Socket;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

public class ChatFrame extends javax.swing.JFrame {

    private static ClientHandle client;
    private static ClientTransferFile transferfile;
    private static String username;
    private static List<ChatPrivateClass> listChatPrivate = new ArrayList<>();//format sourceUser:desUser
    public static String getUsername() {
        return username;
    }

    public static void setUsername(String username) {
        ChatFrame.username = username;
    }

    public static ClientTransferFile getTransferfile() {
        return transferfile;
    }

    public static void setTransferfile(ClientTransferFile transferfile) {
        ChatFrame.transferfile = transferfile;
    }

    public static ClientHandle getClient() {
        return client;
    }

    public static void setClient(ClientHandle client) {
        ChatFrame.client = client;
    }
    
    /**
     * Creates new form ChatFrame
     */
    public ChatFrame(String username) {
        this.username = username;
        initComponents();
        this.setLocationRelativeTo(null);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                client.WriteExitClient();
                client.CloseClient();
            }
        });
        Thread clientthread = new Thread(){
            public void run() {
                client = new ClientHandle();
                client.InitClient(username);
            }
        };
        
        Thread readupdate = new Thread(){
          public void run() {
              //System.out.println("readupdate");
              ReadUpdate(client.getSocket()); 
          }
         };
        clientthread.start();
        try{
            clientthread.join();
            
        }catch(Exception ex){
        }
        readupdate.start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtareaChatGroup = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtbOnlineUser = new javax.swing.JTable();
        txtMess = new javax.swing.JTextField();
        btnSend = new javax.swing.JButton();
        btnExit = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(0, 153, 153));

        jScrollPane1.setBackground(new java.awt.Color(204, 255, 255));
        jScrollPane1.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(204, 204, 0)));

        txtareaChatGroup.setBackground(new java.awt.Color(204, 255, 255));
        txtareaChatGroup.setColumns(20);
        txtareaChatGroup.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        txtareaChatGroup.setRows(5);
        txtareaChatGroup.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 2, 2, new java.awt.Color(255, 255, 0)));
        txtareaChatGroup.setDisabledTextColor(new java.awt.Color(0, 0, 153));
        txtareaChatGroup.setEnabled(false);
        txtareaChatGroup.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtareaChatGroupMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(txtareaChatGroup);

        jtbOnlineUser.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Online User"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jtbOnlineUser.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtbOnlineUserMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jtbOnlineUser);

        txtMess.setActionCommand("<Not Set>");
        txtMess.setCursor(new java.awt.Cursor(java.awt.Cursor.MOVE_CURSOR));
        txtMess.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMessActionPerformed(evt);
            }
        });
        txtMess.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtMessKeyPressed(evt);
            }
        });

        btnSend.setText("Send");
        btnSend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSendActionPerformed(evt);
            }
        });

        btnExit.setText("Đăng Xuất");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtMess)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 392, Short.MAX_VALUE))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSend)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnExit)
                        .addContainerGap(26, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 370, Short.MAX_VALUE)
                    .addComponent(jScrollPane1))
                .addGap(44, 44, 44)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtMess, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSend, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnExit, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(34, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtMessActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMessActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMessActionPerformed

    private void btnSendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSendActionPerformed
        // TODO add your handling code here:
        String type = "ChatGroup";
        String mess = username+":"+txtMess.getText()+":"+type;
        client.WriteClient(mess);
        txtMess.setText("");
    }//GEN-LAST:event_btnSendActionPerformed

    private void txtMessKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMessKeyPressed
        // TODO add your handling code here:
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            String type = "ChatGroup";
            String mess = username+":"+txtMess.getText()+":"+type;
            client.WriteClient(mess);
            txtMess.setText("");
        }
        
    }//GEN-LAST:event_txtMessKeyPressed

    private void jtbOnlineUserMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtbOnlineUserMouseClicked
        // TODO add your handling code here:
        
        if(evt.getClickCount()==2){
            int i = jtbOnlineUser.getSelectedRow();
            TableModel model = jtbOnlineUser.getModel();
            String desUser = model.getValueAt(i, 0).toString();
            String source = username;
            Thread th = new Thread(){
                public void run(){
                    ChatPrivate chatPrivatef = new ChatPrivate(source,desUser,client,"");
                    ChatPrivateClass chatPrivate = new ChatPrivateClass(chatPrivatef,source,desUser);
                    listChatPrivate.add(chatPrivate);
                    chatPrivate.getChatprivate().setVisible(true);
                }
            };
            th.setName(source+"-"+desUser);
            th.start();
        }
        
        
    }//GEN-LAST:event_jtbOnlineUserMouseClicked

    private void txtareaChatGroupMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtareaChatGroupMouseClicked
        // TODO add your handling code here:
        
        if(evt.getClickCount()==2) 
        {
            int x = evt.getX();
            int y = evt.getY();
            System.out.println("X: "+x+" Y:"+y);
            int startOffset = txtareaChatGroup.viewToModel(new Point(x, y));
            System.out.println(startOffset);
            String text = txtareaChatGroup.getText();
         
            int searchHttp = 0;
            int wordEndIndex = 0;
            String[] words = text.split("\\s");

            for(String word:words)
            {
                if(word.startsWith("File..."))
                {
                    searchHttp = text.indexOf(word);
                    wordEndIndex = searchHttp+word.length();
                    if(startOffset>=searchHttp && startOffset<=wordEndIndex)
                    {
                        try
                        {
                            txtareaChatGroup.select(searchHttp, wordEndIndex);
                            System.out.println(word);
                            File fileadd = new File("textfile/account.txt");
                            FileInputStream fileInputStream=new FileInputStream(fileadd);
                            byte[] data=new byte[(int) fileadd.length()];
                            BufferedInputStream bufferedInputStream=new BufferedInputStream(fileInputStream);
                            bufferedInputStream.read(data,0,data.length);
                            JFileChooser ch = new JFileChooser();
                            int c = ch.showSaveDialog(jPanel1);
                            if (c == JFileChooser.APPROVE_OPTION) {
                                try {
                                    FileOutputStream out = new FileOutputStream(ch.getSelectedFile());
                                    out.write(data);
                                    out.close();
                                } catch (IOException ex) {
                                    System.out.println("err mouse click: "+ex.getMessage());
                                    JOptionPane.showMessageDialog(jPanel1, ex, "Error", JOptionPane.ERROR_MESSAGE);
                                }
                            }
                            //desk.browse(new URI(word)); //opening the link in browser. Desktop desk = Desktop.getDesktop();
                        }
                        catch(Exception e)
                        {
                            e.printStackTrace();
                        }

                    }
                }
            }                 
                                      
        }
    }//GEN-LAST:event_txtareaChatGroupMouseClicked

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        // TODO add your handling code here:
        client.WriteExitClient();
        client.CloseClient();
        System.exit(0);
    }//GEN-LAST:event_btnExitActionPerformed
    public void ReadUpdate(Socket socket)
    {
        BufferedReader is=null;
        String line=null;
        try {
            is=new BufferedReader(new InputStreamReader(socket.getInputStream()));
        }
        catch (IOException e){
            e.printStackTrace();
            System.err.print("IO Exception");
        }
        try{
            while(true){
                line = is.readLine();
                System.out.println("line: "+line);
                String rq = line.split(":")[2];
                String messfromserver = line.split(":")[1];
                String userfromserver = line.split(":")[0];
                String messappendtochatgroup = userfromserver+":"+messfromserver+"\n";
                if(rq.equals("ChatGroup")){
                    txtareaChatGroup.append(messappendtochatgroup);
                }
                if (rq.equals("UserOnline") ||rq.equals("UserExit") )
                {
                    txtareaChatGroup.append(messfromserver+"\n");
                    String ListOnlineUser = line.split(";")[1];
                    System.out.println(ListOnlineUser);
                    List<String> OnlineUsers = new ArrayList<>();
                    String[]datatmp = ListOnlineUser.split(":");
                    String[] data = datatmp[1].split(",");
                    for(String item:data){
                        if(!item.equals(username)){
                            OnlineUsers.add(item);
                        }
                    }
                    showTableUserOnline(OnlineUsers);
                    System.out.println("OnlineUsers: "+OnlineUsers);
                }
                
                if(rq.equals("ChatPrivate")){
                    //format sourceUser:mess:ChatPrivate:desUser
                    String[]data = line.split(":");
                    String sourceUser = data[0];
                    String desUser = data[3];
                    boolean flag = false;
                    System.out.println("_Read_ChatPrivate: "+line);
                    for(ChatPrivateClass item:listChatPrivate){
                        //String sourceExist = item.split(":")[0];
                        String desExist = item.getDes();
                        String sourceExist = item.getSource();
                        System.out.println(sourceUser+";"+desExist+"---"+desUser+";"+sourceExist);
                        if((sourceUser.equals(desExist)&& desUser.equals(sourceExist)) 
                                || (sourceUser.equals(sourceExist)&& desUser.equals(desExist))){
                            item.getChatprivate().appendmess(sourceUser+":"+data[1]);
                            flag = true;
                        }
                    }
                    if(!flag){
                         Thread t = new Thread(){
                            public void run(){
                                ChatPrivate chatPrivateF = new ChatPrivate(desUser,sourceUser,client,data[1]);
                                ChatPrivateClass chatPrivate = new ChatPrivateClass(chatPrivateF,desUser,sourceUser);
                                listChatPrivate.add(chatPrivate);
                                chatPrivate.getChatprivate().setVisible(true);
                                chatPrivate.getChatprivate().appendmess(sourceUser+":"+data[1]);
                            }
                        };
                        t.start();
                    }
                }
                if(rq.equals("ExitPrivate")){
                    //format src::ExitPrivate:des
                    String src = line.split(":")[0];
                    String des = line.split(":")[1];
                    int count=0;
                    for(ChatPrivateClass item:listChatPrivate){
                        String sourceExist = item.getSource();
                        String desExist = item.getDes();
                        if(src.equals(sourceExist) && des.equals(desExist)){
                            listChatPrivate.remove(count);
                        }
                        count++;
                    }
                }
                if(rq.equals("SendFile")){
                    //format: src:mess(Ok):SendFile:desUser
                    System.out.println("3_SendFile receive alert from server");
                    String src = line.split(":")[0];
                    String des = line.split(":")[3];
                    String messreply = line.split(":")[1];
                    if(messreply.equalsIgnoreCase("Ok")){
                        if(src.equals(client.getUser())){
                            String pathfile = client.getPathfile();
                            try {
                                Thread.sleep(500);
                            } catch (InterruptedException ex) {
                                Logger.getLogger(ChatFrame.class.getName()).log(Level.SEVERE, null, ex);
                            }
                           Thread transferthread = new Thread(){
                                public void run() {
                                    transferfile = new ClientTransferFile();
                                    transferfile.Init(src,des,pathfile);
                                    System.out.println("--Init transferfile successfully");
                                }
                            };
                            transferthread.start();
                            try {
                                transferthread.join();
                                transferfile.WriteFileClient();
                                boolean flag = false;
                                for(ChatPrivateClass item:listChatPrivate){
                                    //String sourceExist = item.split(":")[0];
                                    String desExist = item.getDes();
                                    if(src.equals(desExist)||des.equals(desExist)){
                                        item.getChatprivate().setTransferfile(transferfile);
                                        item.getChatprivate().ReadTransferFile();
                                        transferfile.closeTransferFileFromClient();
                                        client.closeTransferFileMess();
                                        flag = true;
                                    }
                                }
                                if(!flag){
                                     Thread t = new Thread(){
                                        public void run(){
                                            ChatPrivate chatPrivateF = new ChatPrivate(des,src,client,"");
                                            chatPrivateF.setTransferfile(transferfile);
                                            ChatPrivateClass chatPrivate = new ChatPrivateClass(chatPrivateF,des,src);
                                            listChatPrivate.add(chatPrivate);
                                            chatPrivate.getChatprivate().setVisible(true);
                                            chatPrivateF.ReadTransferFile();
                                            transferfile.closeTransferFileFromClient();
                                            client.closeTransferFileMess();
                                            //chatPrivate.getChatprivate().appendmess(src+":"+"");
                                        }
                                    };
                                    t.start();
                                }


                            } catch (InterruptedException ex) {
                                Logger.getLogger(ChatFrame.class.getName()).log(Level.SEVERE, null, ex);
                            }

                       }else{
                            
                            try {
                                Thread.sleep(500);
                            } catch (InterruptedException ex) {
                                Logger.getLogger(ChatFrame.class.getName()).log(Level.SEVERE, null, ex);
                            }
                           Thread transferthread = new Thread(){
                                public void run() {
                                    transferfile = new ClientTransferFile();
                                    transferfile.Init(src,des,"");
                                    System.out.println("--Init transferfile successfully");
                                }
                            };
                            transferthread.start();
                            try {
                                transferthread.join();
                                boolean flag = false;
                                for(ChatPrivateClass item:listChatPrivate){
                                    //String sourceExist = item.split(":")[0];
                                    String desExist = item.getDes();
                                    if(src.equals(desExist)||des.equals(desExist)){
                                        item.getChatprivate().ReadTransferFile();
                                        transferfile.closeTransferFileFromClient();
                                        client.closeTransferFileMess();
                                        flag = true;
                                    }
                                }
                                if(!flag){
                                     Thread t = new Thread(){
                                        public void run(){
                                            ChatPrivate chatPrivateF = new ChatPrivate(des,src,client,"");
                                            ChatPrivateClass chatPrivate = new ChatPrivateClass(chatPrivateF,des,src);
                                            listChatPrivate.add(chatPrivate);
                                            chatPrivate.getChatprivate().setVisible(true);
                                            chatPrivateF.ReadTransferFile();
                                            transferfile.closeTransferFileFromClient();
                                            client.closeTransferFileMess();
                                            //chatPrivate.getChatprivate().appendmess(src+":"+"");
                                        }
                                    };
                                    t.start();
                                }
                            } catch (InterruptedException ex) {
                                Logger.getLogger(ChatFrame.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }

                        
                    }
                    
                }
                
            }
        }
        catch(IOException e){
            e.printStackTrace();
            System.out.println("Socket read Error");
        }
    }
    public void Receivefile(Socket socket){
        System.out.println("7_Receive File: ready to receive");
        System.out.println("---Client recieve file: "+socket.toString());
        ObjectInputStream ois = null;
        try {
            ois = new ObjectInputStream(socket.getInputStream());
            
            try {
                Data_file datafile = (Data_file) ois.readObject();
                System.out.println("-Server file:read file successfully");
                String sourceName = datafile.getdes_name();
                String desName = datafile.getsource_name();
                System.out.println("File: "+datafile.toString());
                //Read_ChatClient read = new Read_ChatClient(client, desName);
                //read.start();
                //client.close();
            } catch (ClassNotFoundException ex) {
                
            }
        } catch (IOException ex) {
            try {
                ois.close();
            } catch (IOException ex1) {
                
            }
           
        }
       
    }
        
    
    public void showTableUserOnline(List<String> ListUserOnline){
        DefaultTableModel model = (DefaultTableModel) jtbOnlineUser.getModel();
        model.setRowCount(0);
        for(int i=0; i<ListUserOnline.size();i++){
            model.addRow(new Object[]{ListUserOnline.get(i)});
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ChatFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ChatFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ChatFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ChatFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ChatFrame(username).setVisible(true);
                
            }
        });
        
    }
   public class Foo implements Runnable {
    private String messtmp2 = null;
    private Socket socket;

    public Foo(Socket socket) {
        this.socket = socket;
    }
    
    public String getMesstmp2() {
        return messtmp2;
    }

    public void setMesstmp2(String messtmp2) {
        this.messtmp2 = messtmp2;
    }
    
    @Override
    public void run(){
        System.out.println("Thread read file");
        BufferedReader is2=null;
        try {
             
             String tmp2 = null;
             is2=new BufferedReader(new InputStreamReader(socket.getInputStream()));
             System.out.println("Thread passs read file is2");
             System.out.println("socket : "+socket);
             tmp2 = is2.readLine();
             System.out.println("is2.readline() : "+tmp2);
            while((tmp2 = is2.readLine()).isEmpty() || (tmp2 = is2.readLine())!=null)
            {
                System.out.println("tmp 1: "+tmp2);
                messtmp2+=(tmp2+"\n");
                System.out.println("messtmp2: "+messtmp2);
            }
        } catch (IOException ex) {
            Logger.getLogger(ChatFrame.class.getName()).log(Level.SEVERE, null, ex);
        }finally{
            try {
                is2.close();
            } catch (IOException ex) {
                Logger.getLogger(ChatFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
 }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnSend;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jtbOnlineUser;
    private javax.swing.JTextField txtMess;
    private javax.swing.JTextArea txtareaChatGroup;
    // End of variables declaration//GEN-END:variables
}
